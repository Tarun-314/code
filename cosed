import java.util.*;
public class Solution {
// Segment Tree Node structure
    class SegmentTreeNode {
        int start, end;
        SegmentTreeNode left, right;
        int sum;
        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
            this.left = null;
            this.right = null;
            this.sum = 0;
        }
    }
    SegmentTreeNode root = null;
    public Solution(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }
    private SegmentTreeNode buildTree(int[] nums, int start, int end) {
        //build the segment Tree
        if(start > end){
            return null;
        }
        SegmentTreeNode node = new SegmentTreeNode(start,end);
        if(start == end){
            node.sum = nums[start];
            return node;
        }
        int mid = start + (end-start)/2;
        node.left = buildTree(nums,start,mid);
        node.right = buildTree(nums,mid+1,end);
        node.sum = node.left.sum + node.right.sum;
        return node;
    }
   
    void update(int ind, int val) {
        //implement update method
        modifyTree(ind,val,root);
        
    }
    public int sumRange(int i, int j) {
        //implement sumRange method
        return queryTree(i,j,root);
   
    }
    public int queryTree(int i,int j,SegmentTreeNode node){
        if(node == null){
            return 0;
        }
        if(node.start == i && node.end == j){
            return node.sum;
        }
        int mid = (node.start+node.end)/2;
        if(i>mid){
            return queryTree(i,j,node.right);
        }
        if(j<=mid){
            return queryTree(i,j,node.left);
        }
        return queryTree(i,mid,node.left) + queryTree(mid+1,j,node.right);
    }
    public int modifyTree(int i,int val,SegmentTreeNode node){
        if(node == null){
            return 0;
        }
        int diff;
        if(node.start == i && node.end == i){
            diff = val - node.sum;
            node.sum = val;
            return diff;
        }
        int mid = (node.start+node.end)/2;
        if(i>mid){
            diff = modifyTree(i,val,node.right);
        }
        else{
            diff = modifyTree(i,val,node.left);
        }
        node.sum = node.sum + diff;
        return diff;
    }
    
}
